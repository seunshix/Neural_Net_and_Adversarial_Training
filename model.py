# -*- coding: utf-8 -*-
"""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n78cujcfql9x0pspMSfpcGOdt1zUROeY
"""

# Creating Neural Network for USPS Dataset

import numpy as np
from keras.utils import np_utils
from keras import optimizers, Model, regularizers
from keras.models import Sequential
from keras.layers import Dense, LocallyConnected2D, Average, LeakyReLU
from keras.layers import Dropout, LocallyConnected1D
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from sklearn import metrics
from matplotlib import pyplot as plt

# loading test and train data
x_train = []
y_train = []
trainfile = open("train.txt", "r")
for line in trainfile:
    x = line.split()
    row = []
    count = 0
    for val in x:
        if count == 0:
            y_train.append(float(val))
        else:
            row.append(val)
        count = count + 1
    x_train.append(row)

trainfile.close()

x_test = []
y_test = []
testfile = open("test.txt", "r")
for line in testfile:
    x = line.split()
    row = []
    count = 0
    for val in x:
        if count == 0:
            y_test.append(float(val))
        else:
            row.append(val)
        count = count + 1
    x_test.append(row)
testfile.close()

def prepareData(x_test, y_test, x_train, y_train):
    xtrain = np.asarray(x_train)
    ytrain = np.asarray(y_train)
    xtest = np.asarray(x_test)
    ytest = np.asarray(y_test)
    # INPUT SHAPE
    xtrain = xtrain.reshape(7291, 256).astype('float32')
    xtest = xtest.reshape(2007, 256).astype('float32')
    # ONEHOTENCODE
    ytrain = np_utils.to_categorical(ytrain)
    ytest = np_utils.to_categorical(ytest)
    return xtrain, ytrain, xtest, ytest

def prepareData2(x_test, y_test, x_train, y_train):
    xtrain = np.asarray(x_train)
    ytrain = np.asarray(y_train)
    xtest = np.asarray(x_test)
    ytest = np.asarray(y_test)
    # INPUT SHAPE
    xtrain = xtrain.reshape((xtrain.shape[0], 16, 16, 1)).astype('float32')
    xtest = xtest.reshape((xtest.shape[0], 16, 16, 1)).astype('float32')
    # ONEHOTENCODE
    ytrain = np_utils.to_categorical(ytrain)
    ytest = np_utils.to_categorical(ytest)
    return xtrain, ytrain, xtest, ytest


# Fully Connected Model
def fully_connected(xtrain, ytrain, xtest, ytest):
    model = Sequential()
    model.add(Dense(256, input_dim=16 * 16, activation='relu'))
    model.add(Dropout(0.2))
    model.add(Dense(256, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(256, activation='tanh'))
    model.add(Dropout(0.5))
    model.add(Dense(10, activation='softmax'))
    sgd = optimizers.SGD(lr = 0.01, momentum = 0.5)
    model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
    history = model.fit(xtrain, ytrain, validation_data=(xtest, ytest), epochs=20, batch_size=16, verbose=0)
    score = model.evaluate(xtest, ytest)
    print(score)
    plt.plot(history.history['accuracy'], label='train')
    plt.plot(history.history['val_accuracy'], label='test')
    #plt.title('learning rate=' + str(lrate), pad=-50)
    return model

# Locally Connected Neural Network
def locally_connected(xtrain, ytrain, xtest, ytest):
    model = Sequential()
    model.add(LocallyConnected2D(15, (4, 4), input_shape=(16, 16, 1)))
    model.add(MaxPooling2D())
    model.add(Dropout(0.2))
    model.add(Flatten())
    model.add(Dense(100, activation='relu', ))
    model.add(Dropout(0.5))
    model.add(Dense(100, activation='tanh'))
    model.add(Dropout(0.5))
    model.add(Dense(10, activation='softmax'))
    sgd = optimizers.SGD(lr = 0.1, momentum = 0.5)
    model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
    history = model.fit(xtrain, ytrain, validation_data=(xtest, ytest), epochs=20, batch_size=16, verbose=0)
    score = model.evaluate(xtest, ytest)
    print(score)
    plt.plot(history.history['accuracy'], label='train')
    plt.plot(history.history['val_accuracy'], label='test')
    #plt.title('learning rate=' + str(lrate), pad=-50)
    return model

# Convolutional Neural Network
def cnn_model(xtrain, ytrain, xtest, ytest):
    model = Sequential()
    model.add(Conv2D(32, (5, 5), input_shape=(16, 16, 1), activation='relu'))
    model.add(MaxPooling2D())
    model.add(Dropout(1e-5))
    model.add(Flatten())
    model.add(Dense(100, activation='relu'))
    model.add(Dropout(1e-5))
    model.add(Dense(100, activation='tanh'))
    model.add(Dropout(1e-5))
    model.add(Dense(10, activation='softmax'))
    sgd = optimizers.SGD(lr = 0.1, momentum = 0.5)
    model.compile(loss='categorical_crossentropy', optimizer = sgd, metrics=['accuracy'])
    history = model.fit(xtrain, ytrain, validation_data=(xtest, ytest), epochs=20, batch_size = 128, verbose=0)
    score = model.evaluate(xtest, ytest)
    print(score)
    plt.plot(history.history['accuracy'], label='train')
    plt.plot(history.history['val_accuracy'], label='test')
    #plt.title('learning rate=' + str(lrate), pad=-50)
    #plt.title('momentum='+str(momentums), pad=-70)
    return model


xtrain, ytrain, xtest, ytest = prepareData(x_test, y_test, x_train, y_train)
xtrain1, ytrain1, xtest1, ytest1 = prepareData2(x_test, y_test, x_train, y_train)
#model1 = fully_connected(xtrain, ytrain, xtest, ytest)
#model2 = locally_connected(xtrain1, ytrain1, xtest1, ytest1)
model3 = cnn_model(xtrain1, ytrain1, xtest1, ytest1)

#bs = [16, 32, 64 , 128, 256, 512, 1024, 2048]
#for i in range(len(bs)):
#  plot_no = 420 + (i+1)
#  plt.subplot(plot_no)
#  model3 = cnn_model(xtrain1, ytrain1, xtest1, ytest1, bs[i])   

# create learning curves for different momentums
#momentums = [0.5, 0.9, 0.99]
#for i in range(len(momentums)):
  #plot_no = 220 + (i+1)
  #plt.subplot(plot_no)
  #model3 = cnn_model(xtrain1, ytrain1, xtest1, ytest1, momentums[i])    

# create learning curves for different learning rates
#learning_rates = [1E-0, 1E-1, 1E-2, 1E-3, 1E-4, 1E-5, 1E-6, 1E-7]
#for i in range(len(learning_rates)):
    # determine the plot number
    #plot_no = 420 + (i + 1)
    #plt.subplot(plot_no)
    # fit model and plot learning curves for a learning rate
    #model1 = fully_connected(xtrain, ytrain, xtest, ytest, learning_rates[i])
    #model2 = locally_connected(xtrain1, ytrain1, xtest1, ytest1, learning_rates[i])
    #model3 = cnn_model(xtrain1, ytrain1, xtest1, ytest1, 1)
# show learning curves
#plt.show()


# ENSEMBLE MODEL
def model1(xtrain, ytrain, xtest, ytest):
    model = Sequential()
    model.add(Dense(256, input_dim=16 * 16, activation='relu'))
    model.add(Dense(256, activation='relu'))
    model.add(Dense(256, activation='tanh'))
    model.add(Dense(10, activation='softmax'))
    opt = optimizers.SGD(lr=0.1, momentum=0.5)
    model.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy'])
    history = model.fit(xtrain, ytrain, validation_data=(xtest, ytest), epochs=20, batch_size=16, verbose=0)
    score = model.evaluate(xtest, ytest)
    print(score)
    return model

# Locally Connected Neural Network
def model2(xtrain, ytrain, xtest, ytest):
    model = Sequential()
    model.add(LocallyConnected2D(15, (4, 4), input_shape=(16, 16, 1)))
    model.add(MaxPooling2D())
    model.add(Flatten())
    model.add(Dense(100, activation='relu', ))
    model.add(Dense(100, activation='tanh'))
    model.add(Dense(10, activation='softmax'))
    sgd = optimizers.SGD(lr=0.1, momentum=0.5)
    model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
    history = model.fit(xtrain, ytrain, validation_data=(xtest, ytest), epochs=20, batch_size=16, verbose=0)
    score = model.evaluate(xtest, ytest)
    print(score)
    return model

def model3(xtrain, ytrain, xtest, ytest):
    model = Sequential()
    model.add(Conv2D(32, (5, 5), input_shape=(16, 16, 1), activation='relu'))
    model.add(MaxPooling2D())
    model.add(Flatten())
    model.add(Dense(100, activation='relu'))
    model.add(Dense(100, activation='tanh'))
    model.add(Dense(10, activation='softmax'))
    sgd = optimizers.SGD(lr=0.1, momentum=0.5)
    model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
    history = model.fit(xtrain, ytrain, validation_data=(xtest, ytest), epochs=20, batch_size=16, verbose=0)
    return model

def model4(xtrain, ytrain, xtest, ytest):
    model = Sequential()
    model.add(Conv2D(32, (5, 5), input_shape=(16, 16, 1), activation='relu'))
    model.add(MaxPooling2D())
    model.add(Flatten())
    model.add(Dense(100, activation='relu'))
    model.add(Dense(100, activation='tanh'))
    model.add(Dense(10, activation='softmax'))
    sgd = optimizers.SGD(lr=0.1, momentum=0.5)
    model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
    history = model.fit(xtrain, ytrain, validation_data=(xtest, ytest), epochs=20, batch_size=16, verbose=0)
    return model


def ensemble_model():
  xtrain, ytrain, xtest, ytest = prepareData(x_test, y_test, x_train, y_train)
  xtrain1, ytrain1, xtest1, ytest1 = prepareData2(x_test, y_test, x_train, y_train)

  mod1 = model1(xtrain, ytrain, xtest, ytest)
  mod2 = model2(xtrain1, ytrain1, xtest1, ytest1)
  mod3 = model3(xtrain1, ytrain1, xtest1, ytest1)
  mod4 = model4(xtrain1, ytrain1, xtest1, ytest1)
  
  # For the ensemble, I found the average of each y label in each model 1-6.
  y1 = np.asarray(mod1.predict(xtrain))
  y2 = np.asarray(mod2.predict(xtrain1))
  y3 = np.asarray(mod3.predict(xtrain1))
  y4 = np.asarray(mod4.predict(xtrain1))

  y_ensemble = []

  for i in range(y1.shape[0]):
      y_row = []
      for j in range(y1.shape[1]):
        y_row.append(((y1[i][j] + y2[i][j] + y3[i][j] + y4[i][j]) * 1.0) / 4)
      y_ensemble.append(np.argmax(y_row))
  print("Train Accuracy:", metrics.accuracy_score(y_train, y_ensemble))

  y1 = np.asarray(mod1.predict(xtest))
  y2 = np.asarray(mod2.predict(xtest1))
  y3 = np.asarray(mod3.predict(xtest1))
  y4 = np.asarray(mod4.predict(xtest1))

  y_ensemble = []

  for i in range(y1.shape[0]):
      y_row = []
      for j in range(y1.shape[1]):
          y_row.append(((y1[i][j] + y2[i][j] + y3[i][j] + y4[i][j]) * 1.0) / 4)
      y_ensemble.append(np.argmax(y_row))
  print("Test Accuracy:", metrics.accuracy_score(y_test,  y_ensemble))
#ensemble_model()



# Adversarial Network

def load_real_samples():
    dataset = (xtrain,_ ), (_, _)
    # expand to 3d, e.g add channels dimension
    X = np.expand_dims(xtrain, axis=-1)
    # convert from unsigned ints to floats
    X = X.reshape((xtrain.shape[0], 16, 16, 1)).astype('float32')
    # scale from [0,255] to [0,1]
    X = X / 255.0
    return X


def discriminator(in_shape=(16, 16, 1)):
    model = Sequential()
    model.add(Conv2D(64, (3, 3), strides=(2, 2), padding='same', input_shape=in_shape))
    model.add(LeakyReLU(alpha=0.2))
    #model.add(BatchNormalization())
    model.add(Conv2D(64, (3, 3), strides=(2, 2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    #model.add(BatchNormalization())
    model.add(Flatten())
    model.add(Dense(1, activation='sigmoid'))
    # compile model
    opt = Adam(lr=0.0004, beta_1=0.5)
    model.compile(loss='mse', optimizer=opt, metrics=['accuracy'])
    # model.summary()
    return model


def generator(latent_dim):
    # define the generator model
    model = Sequential()
    # foundation for 4x4 image
    n_nodes = 128 * 4 * 4
    model.add(Dense(n_nodes, input_dim=latent_dim))
    model.add(LeakyReLU(alpha=0.2))
    #model.add(BatchNormalization())
    model.add(Reshape((4, 4, 128)))
    # upsample to 8x8
    model.add(Conv2DTranspose(128, (4, 4), strides=(2, 2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    #model.add(BatchNormalization())
    # upsample to 16x16
    model.add(Conv2DTranspose(128, (4, 4), strides=(2, 2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    #model.add(BatchNormalization())
    model.add(Conv2D(1, (4, 4), activation='tanh', padding='same'))
    return model


def disGen(g_model, d_model):
    # create the composite model for training the generator
    # make weights in the discriminator not trainable
    discriminator().trainable = False
    # connect them
    model = Sequential()
    # add generator
    model.add(g_model)
    # add the discriminator
    model.add(d_model)
    # compile model
    opt = Adam(lr=0.0002, beta_1=0.5)
    model.compile(loss='mse', optimizer=opt)
    return model


# generate points in latent space as input for the generator
def generate_latent_points(latent_dim, n_samples):
    # generate points in the latent space
    x_input = randn(latent_dim * n_samples)
    # reshape into a batch of inputs for the network
    x_input = x_input.reshape(n_samples, latent_dim)
    return x_input


# select real samples
def generate_real_samples(dataset, n_samples):
    # choose random instances
    ix = randint(0, dataset.shape[0], n_samples)
    # retrieve selected images
    X = dataset[ix]
    # generate 'real' class labels (1)
    y = ones((n_samples, 1))
    return X, y


# use the generator to generate n fake examples, with class labels
def generate_fake_samples(g_model, latent_dim, n_samples):
    # generate points in latent space
    x_input = generate_latent_points(latent_dim, n_samples)
    # predict outputs
    X = g_model.predict(x_input)
    # create 'fake' class labels (0)
    y = zeros((n_samples, 1))
    return X, y


# create and save a plot of generated images (reversed grayscale)
def save_plot(examples, epoch, n=10):
    # plot images
    for i in range(n * n):
        # define subplot
        plt.subplot(n, n, 1 + i)
        # turn off axis
        plt.axis('off')
        # plot raw pixel data
        plt.imshow(examples[i, :, :, 0], cmap='gray_r')
    # save plot to file
    filename = 'generated_plot_e%03d.png' % (epoch + 1)
    plt.savefig(filename)
    plt.close()


# evaluate the discriminator, plot generated images, save generator model
def summarize_performance(epoch, g_model, d_model, dataset, latent_dim, n_samples=100):
    # prepare real samples
    X_real, y_real = generate_real_samples(dataset, n_samples)
    # evaluate discriminator on real examples
    _, acc_real = d_model.evaluate(X_real, y_real, verbose=1)
    # prepare fake examples
    x_fake, y_fake = generate_fake_samples(g_model, latent_dim, n_samples)
    # evaluate discriminator on fake examples
    _, acc_fake = d_model.evaluate(x_fake, y_fake, verbose=1)
    # summarize discriminator performance
    print('>Accuracy real: %.0f%%, fake: %.0f%%' % (acc_real * 100, acc_fake * 100))
    # save plot
    save_plot(x_fake, epoch)
    # save the generator model tile file
    filename = 'generator_model_%03d.h5' % (epoch + 1)
    g_model.save(filename)


# train the generator and discriminator
def train(g_model, d_model, gan_model, dataset, latent_dim, n_epochs = 1000, n_batch=32):
    bat_per_epo = int(dataset.shape[0] / n_batch)
    half_batch = int(n_batch / 2)
    # manually enumerate epochs
    for i in range(n_epochs):
        # enumerate batches over the training set
        for j in range(bat_per_epo):
            # get randomly selected 'real' samples
            X_real, y_real = generate_real_samples(dataset, half_batch)
            # generate 'fake' examples
            X_fake, y_fake = generate_fake_samples(g_model, latent_dim, half_batch)
            # create training set for the discriminator
            X, y = vstack((X_real, X_fake)), vstack((y_real, y_fake))
            # update discriminator model weights
            d_loss, _ = d_model.train_on_batch(X, y)
            # prepare points in latent space as input for the generator
            X_gan = generate_latent_points(latent_dim, n_batch)
            # create inverted labels for the fake samples
            y_gan = ones((n_batch, 1))
            # update the generator via the discriminator's error
            g_loss = gan_model.train_on_batch(X_gan, y_gan)
            # summarize loss on this batch
            print('>%d, %d/%d, d=%.3f, g=%.3f' % (i + 1, j + 1, bat_per_epo, d_loss, g_loss))
        # evaluate the model performance, sometimes
        if (i + 1) % 10 == 0:
            summarize_performance(i, g_model, d_model, dataset, latent_dim)


# size of the latent space
latent_dim = 100
# create the discriminator
d_model = discriminator()
# create the generator
g_model = generator(latent_dim)
# create the gan
gan_model = disGen(g_model, d_model)
# load image data
dataset = load_real_samples()
# train model
train(g_model, d_model, gan_model, dataset, latent_dim)